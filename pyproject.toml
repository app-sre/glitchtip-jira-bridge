[project]
name = "glitchtip-jira-bridge"
version = "0.2.0"
requires-python = "~= 3.12.0"
description = "The Glitchtip-Jira-Bridge seamlessly processes Glitchtip alerts through webhooks, transforming them into detailed, actionable Jira tickets."
readme = "README.md"
authors = [{ name = "Christian Assing", email = "cassing@redhat.com" }]
dependencies = [
    "celery[sqs] ~=5.4.0",
    "fastapi ~=0.115.5",
    "jira ~=3.8.0",
    "prometheus-fastapi-instrumentator ~=7.1.0",
    "pycurl ~=7.45.3",
    "pydantic ~=2.10.1",
    "pydantic-settings ~=2.8.0",
    "uvicorn ~=0.34.0",
]

[project.urls]
homepage = "https://github.com/app-sre/glitchtip-jira-bridge"
repository = "https://github.com/app-sre/glitchtip-jira-bridge"
documentation = "https://github.com/app-sre/glitchtip-jira-bridge"

[dependency-groups]
dev = [
    "anyio ~=4.9.0",
    "boto3-stubs[dynamodb] ~=1.37.3",
    "httpx ~=0.28.1",
    "mypy ~=1.13",
    "pytest ~=8.3",
    "pytest-cov ~=6.0.0",
    "pytest-mock ~=3.14.0",
    "rich ~=13.9.4",
    "ruff ~=0.7",
    "types-requests ~=2.32.0",
]

# Ruff configuration
[tool.ruff]
line-length = 88
src = ["glitchtip_jira_bridge"]
extend-exclude = [
    # exclude some common cache and tmp directories
    ".local",
    ".cache",
    "tmp",
]
fix = true

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "CPY",     # Missing copyright header
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "D203",    # 1 blank line required before class docstring
    "D211",    # No blank lines allowed before class docstring
    "D212",    # multi-line-summary-first-line
    "D213",    # multi-line-summary-second-line
    "D4",      # Doc string style
    "E501",    # Line too long
    "G004",    # Logging statement uses f-string
    "PLR0904", # Too many public methods
    "PLR0913", # Too many arguments
    "PLR0917", # Too many positional arguments
    "S101",    # Use of assert detected. Pytest uses assert
    "S404",    # subprocess import
    "EM101",   # Exception must not use a string literal, assign to variable first
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY300",  # try-consider-else
    # pydoclint
    "DOC",
    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",
    "ISC001",
]
[tool.ruff.format]
preview = true

[tool.ruff.lint.isort]
known-first-party = ["glitchtip_jira_bridge"]

# Mypy configuration
[tool.mypy]
plugins = ["pydantic.mypy"]
files = ["glitchtip_jira_bridge", "tests"]
enable_error_code = ["truthy-bool", "redundant-expr"]
no_implicit_optional = true
check_untyped_defs = true
warn_unused_ignores = true
show_error_codes = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = ["celery.*"]
ignore_missing_imports = true
